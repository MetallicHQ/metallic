// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: browser.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "browser";

export interface CreateSessionRequest {
  proxyUrl?: string | undefined;
  userAgent?: string | undefined;
  context?: string | undefined;
  customHeaders: { [key: string]: string };
  blockAds?: boolean | undefined;
  timezone?: string | undefined;
  dimensions?: Dimensions | undefined;
  timeout?: number | undefined;
}

export interface CreateSessionRequest_CustomHeadersEntry {
  key: string;
  value: string;
}

export interface Dimensions {
  width: number;
  height: number;
}

export interface CreateSessionResponse {
  success: boolean;
  cdpPort: number;
  error: string;
}

export interface TerminateSessionRequest {
}

export interface TerminateSessionResponse {
  success: boolean;
  error: string;
}

function createBaseCreateSessionRequest(): CreateSessionRequest {
  return {
    proxyUrl: undefined,
    userAgent: undefined,
    context: undefined,
    customHeaders: {},
    blockAds: undefined,
    timezone: undefined,
    dimensions: undefined,
    timeout: undefined,
  };
}

export const CreateSessionRequest: MessageFns<CreateSessionRequest> = {
  encode(message: CreateSessionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.proxyUrl !== undefined) {
      writer.uint32(10).string(message.proxyUrl);
    }
    if (message.userAgent !== undefined) {
      writer.uint32(18).string(message.userAgent);
    }
    if (message.context !== undefined) {
      writer.uint32(26).string(message.context);
    }
    Object.entries(message.customHeaders).forEach(([key, value]) => {
      CreateSessionRequest_CustomHeadersEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    if (message.blockAds !== undefined) {
      writer.uint32(40).bool(message.blockAds);
    }
    if (message.timezone !== undefined) {
      writer.uint32(50).string(message.timezone);
    }
    if (message.dimensions !== undefined) {
      Dimensions.encode(message.dimensions, writer.uint32(58).fork()).join();
    }
    if (message.timeout !== undefined) {
      writer.uint32(64).int32(message.timeout);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateSessionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateSessionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.proxyUrl = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userAgent = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.context = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          const entry4 = CreateSessionRequest_CustomHeadersEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.customHeaders[entry4.key] = entry4.value;
          }
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.blockAds = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.timezone = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.dimensions = Dimensions.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.timeout = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateSessionRequest {
    return {
      proxyUrl: isSet(object.proxyUrl) ? globalThis.String(object.proxyUrl) : undefined,
      userAgent: isSet(object.userAgent) ? globalThis.String(object.userAgent) : undefined,
      context: isSet(object.context) ? globalThis.String(object.context) : undefined,
      customHeaders: isObject(object.customHeaders)
        ? Object.entries(object.customHeaders).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      blockAds: isSet(object.blockAds) ? globalThis.Boolean(object.blockAds) : undefined,
      timezone: isSet(object.timezone) ? globalThis.String(object.timezone) : undefined,
      dimensions: isSet(object.dimensions) ? Dimensions.fromJSON(object.dimensions) : undefined,
      timeout: isSet(object.timeout) ? globalThis.Number(object.timeout) : undefined,
    };
  },

  toJSON(message: CreateSessionRequest): unknown {
    const obj: any = {};
    if (message.proxyUrl !== undefined) {
      obj.proxyUrl = message.proxyUrl;
    }
    if (message.userAgent !== undefined) {
      obj.userAgent = message.userAgent;
    }
    if (message.context !== undefined) {
      obj.context = message.context;
    }
    if (message.customHeaders) {
      const entries = Object.entries(message.customHeaders);
      if (entries.length > 0) {
        obj.customHeaders = {};
        entries.forEach(([k, v]) => {
          obj.customHeaders[k] = v;
        });
      }
    }
    if (message.blockAds !== undefined) {
      obj.blockAds = message.blockAds;
    }
    if (message.timezone !== undefined) {
      obj.timezone = message.timezone;
    }
    if (message.dimensions !== undefined) {
      obj.dimensions = Dimensions.toJSON(message.dimensions);
    }
    if (message.timeout !== undefined) {
      obj.timeout = Math.round(message.timeout);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateSessionRequest>, I>>(base?: I): CreateSessionRequest {
    return CreateSessionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateSessionRequest>, I>>(object: I): CreateSessionRequest {
    const message = createBaseCreateSessionRequest();
    message.proxyUrl = object.proxyUrl ?? undefined;
    message.userAgent = object.userAgent ?? undefined;
    message.context = object.context ?? undefined;
    message.customHeaders = Object.entries(object.customHeaders ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.blockAds = object.blockAds ?? undefined;
    message.timezone = object.timezone ?? undefined;
    message.dimensions = (object.dimensions !== undefined && object.dimensions !== null)
      ? Dimensions.fromPartial(object.dimensions)
      : undefined;
    message.timeout = object.timeout ?? undefined;
    return message;
  },
};

function createBaseCreateSessionRequest_CustomHeadersEntry(): CreateSessionRequest_CustomHeadersEntry {
  return { key: "", value: "" };
}

export const CreateSessionRequest_CustomHeadersEntry: MessageFns<CreateSessionRequest_CustomHeadersEntry> = {
  encode(message: CreateSessionRequest_CustomHeadersEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateSessionRequest_CustomHeadersEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateSessionRequest_CustomHeadersEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateSessionRequest_CustomHeadersEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: CreateSessionRequest_CustomHeadersEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateSessionRequest_CustomHeadersEntry>, I>>(
    base?: I,
  ): CreateSessionRequest_CustomHeadersEntry {
    return CreateSessionRequest_CustomHeadersEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateSessionRequest_CustomHeadersEntry>, I>>(
    object: I,
  ): CreateSessionRequest_CustomHeadersEntry {
    const message = createBaseCreateSessionRequest_CustomHeadersEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseDimensions(): Dimensions {
  return { width: 0, height: 0 };
}

export const Dimensions: MessageFns<Dimensions> = {
  encode(message: Dimensions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.width !== 0) {
      writer.uint32(8).int32(message.width);
    }
    if (message.height !== 0) {
      writer.uint32(16).int32(message.height);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Dimensions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDimensions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.width = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.height = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Dimensions {
    return {
      width: isSet(object.width) ? globalThis.Number(object.width) : 0,
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
    };
  },

  toJSON(message: Dimensions): unknown {
    const obj: any = {};
    if (message.width !== 0) {
      obj.width = Math.round(message.width);
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Dimensions>, I>>(base?: I): Dimensions {
    return Dimensions.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Dimensions>, I>>(object: I): Dimensions {
    const message = createBaseDimensions();
    message.width = object.width ?? 0;
    message.height = object.height ?? 0;
    return message;
  },
};

function createBaseCreateSessionResponse(): CreateSessionResponse {
  return { success: false, cdpPort: 0, error: "" };
}

export const CreateSessionResponse: MessageFns<CreateSessionResponse> = {
  encode(message: CreateSessionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.cdpPort !== 0) {
      writer.uint32(16).int32(message.cdpPort);
    }
    if (message.error !== "") {
      writer.uint32(26).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateSessionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateSessionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.cdpPort = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.error = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateSessionResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      cdpPort: isSet(object.cdpPort) ? globalThis.Number(object.cdpPort) : 0,
      error: isSet(object.error) ? globalThis.String(object.error) : "",
    };
  },

  toJSON(message: CreateSessionResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.cdpPort !== 0) {
      obj.cdpPort = Math.round(message.cdpPort);
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateSessionResponse>, I>>(base?: I): CreateSessionResponse {
    return CreateSessionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateSessionResponse>, I>>(object: I): CreateSessionResponse {
    const message = createBaseCreateSessionResponse();
    message.success = object.success ?? false;
    message.cdpPort = object.cdpPort ?? 0;
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseTerminateSessionRequest(): TerminateSessionRequest {
  return {};
}

export const TerminateSessionRequest: MessageFns<TerminateSessionRequest> = {
  encode(_: TerminateSessionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TerminateSessionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTerminateSessionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): TerminateSessionRequest {
    return {};
  },

  toJSON(_: TerminateSessionRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<TerminateSessionRequest>, I>>(base?: I): TerminateSessionRequest {
    return TerminateSessionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TerminateSessionRequest>, I>>(_: I): TerminateSessionRequest {
    const message = createBaseTerminateSessionRequest();
    return message;
  },
};

function createBaseTerminateSessionResponse(): TerminateSessionResponse {
  return { success: false, error: "" };
}

export const TerminateSessionResponse: MessageFns<TerminateSessionResponse> = {
  encode(message: TerminateSessionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.error !== "") {
      writer.uint32(18).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TerminateSessionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTerminateSessionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TerminateSessionResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      error: isSet(object.error) ? globalThis.String(object.error) : "",
    };
  },

  toJSON(message: TerminateSessionResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TerminateSessionResponse>, I>>(base?: I): TerminateSessionResponse {
    return TerminateSessionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TerminateSessionResponse>, I>>(object: I): TerminateSessionResponse {
    const message = createBaseTerminateSessionResponse();
    message.success = object.success ?? false;
    message.error = object.error ?? "";
    return message;
  },
};

export type BrowserService = typeof BrowserService;
export const BrowserService = {
  createSession: {
    path: "/browser.Browser/CreateSession",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateSessionRequest) => Buffer.from(CreateSessionRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateSessionRequest.decode(value),
    responseSerialize: (value: CreateSessionResponse) => Buffer.from(CreateSessionResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CreateSessionResponse.decode(value),
  },
  terminateSession: {
    path: "/browser.Browser/TerminateSession",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: TerminateSessionRequest) => Buffer.from(TerminateSessionRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => TerminateSessionRequest.decode(value),
    responseSerialize: (value: TerminateSessionResponse) =>
      Buffer.from(TerminateSessionResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => TerminateSessionResponse.decode(value),
  },
} as const;

export interface BrowserServer extends UntypedServiceImplementation {
  createSession: handleUnaryCall<CreateSessionRequest, CreateSessionResponse>;
  terminateSession: handleUnaryCall<TerminateSessionRequest, TerminateSessionResponse>;
}

export interface BrowserClient extends Client {
  createSession(
    request: CreateSessionRequest,
    callback: (error: ServiceError | null, response: CreateSessionResponse) => void,
  ): ClientUnaryCall;
  createSession(
    request: CreateSessionRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CreateSessionResponse) => void,
  ): ClientUnaryCall;
  createSession(
    request: CreateSessionRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CreateSessionResponse) => void,
  ): ClientUnaryCall;
  terminateSession(
    request: TerminateSessionRequest,
    callback: (error: ServiceError | null, response: TerminateSessionResponse) => void,
  ): ClientUnaryCall;
  terminateSession(
    request: TerminateSessionRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: TerminateSessionResponse) => void,
  ): ClientUnaryCall;
  terminateSession(
    request: TerminateSessionRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: TerminateSessionResponse) => void,
  ): ClientUnaryCall;
}

export const BrowserClient = makeGenericClientConstructor(BrowserService, "browser.Browser") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): BrowserClient;
  service: typeof BrowserService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

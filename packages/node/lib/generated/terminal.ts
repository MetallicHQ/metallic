// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: terminal.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientReadableStream,
  type ClientUnaryCall,
  type handleServerStreamingCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "terminal";

export interface ListProcessesRequest {
}

export interface ProcessInfo {
  pid: number;
  command: string;
  cwd: string;
  cols: number;
  rows: number;
  startTime: number;
}

export interface ListProcessesResponse {
  success: boolean;
  processes: ProcessInfo[];
  error: string;
}

export interface SpawnProcessRequest {
  cmd: string;
  cwd: string;
  env: { [key: string]: string };
  args: string[];
  cols: number;
  rows: number;
}

export interface SpawnProcessRequest_EnvEntry {
  key: string;
  value: string;
}

export interface SpawnProcessResponse {
  success: boolean;
  pid: number;
  error: string;
}

export interface ConnectToProcessRequest {
  pid: number;
}

export interface ProcessEvent {
  pid: number;
  type: string;
  data: Buffer;
  error: string;
  exitCode: number;
}

export interface SendInputRequest {
  pid: number;
  input: Buffer;
}

export interface SendInputResponse {
  success: boolean;
  error: string;
}

export interface UpdateProcessRequest {
  pid: number;
  cols: number;
  rows: number;
}

export interface UpdateProcessResponse {
  success: boolean;
  error: string;
}

export interface SendSignalRequest {
  pid: number;
  signal: string;
}

export interface SendSignalResponse {
  success: boolean;
  error: string;
}

function createBaseListProcessesRequest(): ListProcessesRequest {
  return {};
}

export const ListProcessesRequest: MessageFns<ListProcessesRequest> = {
  encode(_: ListProcessesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListProcessesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProcessesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListProcessesRequest {
    return {};
  },

  toJSON(_: ListProcessesRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ListProcessesRequest>, I>>(base?: I): ListProcessesRequest {
    return ListProcessesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListProcessesRequest>, I>>(_: I): ListProcessesRequest {
    const message = createBaseListProcessesRequest();
    return message;
  },
};

function createBaseProcessInfo(): ProcessInfo {
  return { pid: 0, command: "", cwd: "", cols: 0, rows: 0, startTime: 0 };
}

export const ProcessInfo: MessageFns<ProcessInfo> = {
  encode(message: ProcessInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pid !== 0) {
      writer.uint32(8).int32(message.pid);
    }
    if (message.command !== "") {
      writer.uint32(18).string(message.command);
    }
    if (message.cwd !== "") {
      writer.uint32(26).string(message.cwd);
    }
    if (message.cols !== 0) {
      writer.uint32(32).uint32(message.cols);
    }
    if (message.rows !== 0) {
      writer.uint32(40).uint32(message.rows);
    }
    if (message.startTime !== 0) {
      writer.uint32(48).int64(message.startTime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProcessInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProcessInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.pid = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.command = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.cwd = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.cols = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.rows = reader.uint32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.startTime = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProcessInfo {
    return {
      pid: isSet(object.pid) ? globalThis.Number(object.pid) : 0,
      command: isSet(object.command) ? globalThis.String(object.command) : "",
      cwd: isSet(object.cwd) ? globalThis.String(object.cwd) : "",
      cols: isSet(object.cols) ? globalThis.Number(object.cols) : 0,
      rows: isSet(object.rows) ? globalThis.Number(object.rows) : 0,
      startTime: isSet(object.startTime) ? globalThis.Number(object.startTime) : 0,
    };
  },

  toJSON(message: ProcessInfo): unknown {
    const obj: any = {};
    if (message.pid !== 0) {
      obj.pid = Math.round(message.pid);
    }
    if (message.command !== "") {
      obj.command = message.command;
    }
    if (message.cwd !== "") {
      obj.cwd = message.cwd;
    }
    if (message.cols !== 0) {
      obj.cols = Math.round(message.cols);
    }
    if (message.rows !== 0) {
      obj.rows = Math.round(message.rows);
    }
    if (message.startTime !== 0) {
      obj.startTime = Math.round(message.startTime);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProcessInfo>, I>>(base?: I): ProcessInfo {
    return ProcessInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProcessInfo>, I>>(object: I): ProcessInfo {
    const message = createBaseProcessInfo();
    message.pid = object.pid ?? 0;
    message.command = object.command ?? "";
    message.cwd = object.cwd ?? "";
    message.cols = object.cols ?? 0;
    message.rows = object.rows ?? 0;
    message.startTime = object.startTime ?? 0;
    return message;
  },
};

function createBaseListProcessesResponse(): ListProcessesResponse {
  return { success: false, processes: [], error: "" };
}

export const ListProcessesResponse: MessageFns<ListProcessesResponse> = {
  encode(message: ListProcessesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    for (const v of message.processes) {
      ProcessInfo.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.error !== "") {
      writer.uint32(26).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListProcessesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProcessesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.processes.push(ProcessInfo.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.error = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProcessesResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      processes: globalThis.Array.isArray(object?.processes)
        ? object.processes.map((e: any) => ProcessInfo.fromJSON(e))
        : [],
      error: isSet(object.error) ? globalThis.String(object.error) : "",
    };
  },

  toJSON(message: ListProcessesResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.processes?.length) {
      obj.processes = message.processes.map((e) => ProcessInfo.toJSON(e));
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListProcessesResponse>, I>>(base?: I): ListProcessesResponse {
    return ListProcessesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListProcessesResponse>, I>>(object: I): ListProcessesResponse {
    const message = createBaseListProcessesResponse();
    message.success = object.success ?? false;
    message.processes = object.processes?.map((e) => ProcessInfo.fromPartial(e)) || [];
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseSpawnProcessRequest(): SpawnProcessRequest {
  return { cmd: "", cwd: "", env: {}, args: [], cols: 0, rows: 0 };
}

export const SpawnProcessRequest: MessageFns<SpawnProcessRequest> = {
  encode(message: SpawnProcessRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cmd !== "") {
      writer.uint32(10).string(message.cmd);
    }
    if (message.cwd !== "") {
      writer.uint32(18).string(message.cwd);
    }
    Object.entries(message.env).forEach(([key, value]) => {
      SpawnProcessRequest_EnvEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).join();
    });
    for (const v of message.args) {
      writer.uint32(34).string(v!);
    }
    if (message.cols !== 0) {
      writer.uint32(40).uint32(message.cols);
    }
    if (message.rows !== 0) {
      writer.uint32(48).uint32(message.rows);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SpawnProcessRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpawnProcessRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.cmd = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.cwd = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          const entry3 = SpawnProcessRequest_EnvEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.env[entry3.key] = entry3.value;
          }
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.args.push(reader.string());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.cols = reader.uint32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.rows = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpawnProcessRequest {
    return {
      cmd: isSet(object.cmd) ? globalThis.String(object.cmd) : "",
      cwd: isSet(object.cwd) ? globalThis.String(object.cwd) : "",
      env: isObject(object.env)
        ? Object.entries(object.env).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      args: globalThis.Array.isArray(object?.args) ? object.args.map((e: any) => globalThis.String(e)) : [],
      cols: isSet(object.cols) ? globalThis.Number(object.cols) : 0,
      rows: isSet(object.rows) ? globalThis.Number(object.rows) : 0,
    };
  },

  toJSON(message: SpawnProcessRequest): unknown {
    const obj: any = {};
    if (message.cmd !== "") {
      obj.cmd = message.cmd;
    }
    if (message.cwd !== "") {
      obj.cwd = message.cwd;
    }
    if (message.env) {
      const entries = Object.entries(message.env);
      if (entries.length > 0) {
        obj.env = {};
        entries.forEach(([k, v]) => {
          obj.env[k] = v;
        });
      }
    }
    if (message.args?.length) {
      obj.args = message.args;
    }
    if (message.cols !== 0) {
      obj.cols = Math.round(message.cols);
    }
    if (message.rows !== 0) {
      obj.rows = Math.round(message.rows);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SpawnProcessRequest>, I>>(base?: I): SpawnProcessRequest {
    return SpawnProcessRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SpawnProcessRequest>, I>>(object: I): SpawnProcessRequest {
    const message = createBaseSpawnProcessRequest();
    message.cmd = object.cmd ?? "";
    message.cwd = object.cwd ?? "";
    message.env = Object.entries(object.env ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.args = object.args?.map((e) => e) || [];
    message.cols = object.cols ?? 0;
    message.rows = object.rows ?? 0;
    return message;
  },
};

function createBaseSpawnProcessRequest_EnvEntry(): SpawnProcessRequest_EnvEntry {
  return { key: "", value: "" };
}

export const SpawnProcessRequest_EnvEntry: MessageFns<SpawnProcessRequest_EnvEntry> = {
  encode(message: SpawnProcessRequest_EnvEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SpawnProcessRequest_EnvEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpawnProcessRequest_EnvEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpawnProcessRequest_EnvEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: SpawnProcessRequest_EnvEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SpawnProcessRequest_EnvEntry>, I>>(base?: I): SpawnProcessRequest_EnvEntry {
    return SpawnProcessRequest_EnvEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SpawnProcessRequest_EnvEntry>, I>>(object: I): SpawnProcessRequest_EnvEntry {
    const message = createBaseSpawnProcessRequest_EnvEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseSpawnProcessResponse(): SpawnProcessResponse {
  return { success: false, pid: 0, error: "" };
}

export const SpawnProcessResponse: MessageFns<SpawnProcessResponse> = {
  encode(message: SpawnProcessResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.pid !== 0) {
      writer.uint32(16).int32(message.pid);
    }
    if (message.error !== "") {
      writer.uint32(26).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SpawnProcessResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpawnProcessResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.pid = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.error = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpawnProcessResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      pid: isSet(object.pid) ? globalThis.Number(object.pid) : 0,
      error: isSet(object.error) ? globalThis.String(object.error) : "",
    };
  },

  toJSON(message: SpawnProcessResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.pid !== 0) {
      obj.pid = Math.round(message.pid);
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SpawnProcessResponse>, I>>(base?: I): SpawnProcessResponse {
    return SpawnProcessResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SpawnProcessResponse>, I>>(object: I): SpawnProcessResponse {
    const message = createBaseSpawnProcessResponse();
    message.success = object.success ?? false;
    message.pid = object.pid ?? 0;
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseConnectToProcessRequest(): ConnectToProcessRequest {
  return { pid: 0 };
}

export const ConnectToProcessRequest: MessageFns<ConnectToProcessRequest> = {
  encode(message: ConnectToProcessRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pid !== 0) {
      writer.uint32(8).int32(message.pid);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConnectToProcessRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConnectToProcessRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.pid = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConnectToProcessRequest {
    return { pid: isSet(object.pid) ? globalThis.Number(object.pid) : 0 };
  },

  toJSON(message: ConnectToProcessRequest): unknown {
    const obj: any = {};
    if (message.pid !== 0) {
      obj.pid = Math.round(message.pid);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConnectToProcessRequest>, I>>(base?: I): ConnectToProcessRequest {
    return ConnectToProcessRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConnectToProcessRequest>, I>>(object: I): ConnectToProcessRequest {
    const message = createBaseConnectToProcessRequest();
    message.pid = object.pid ?? 0;
    return message;
  },
};

function createBaseProcessEvent(): ProcessEvent {
  return { pid: 0, type: "", data: Buffer.alloc(0), error: "", exitCode: 0 };
}

export const ProcessEvent: MessageFns<ProcessEvent> = {
  encode(message: ProcessEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pid !== 0) {
      writer.uint32(8).int32(message.pid);
    }
    if (message.type !== "") {
      writer.uint32(18).string(message.type);
    }
    if (message.data.length !== 0) {
      writer.uint32(26).bytes(message.data);
    }
    if (message.error !== "") {
      writer.uint32(34).string(message.error);
    }
    if (message.exitCode !== 0) {
      writer.uint32(40).int32(message.exitCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProcessEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProcessEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.pid = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = Buffer.from(reader.bytes());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.error = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.exitCode = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProcessEvent {
    return {
      pid: isSet(object.pid) ? globalThis.Number(object.pid) : 0,
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      data: isSet(object.data) ? Buffer.from(bytesFromBase64(object.data)) : Buffer.alloc(0),
      error: isSet(object.error) ? globalThis.String(object.error) : "",
      exitCode: isSet(object.exitCode) ? globalThis.Number(object.exitCode) : 0,
    };
  },

  toJSON(message: ProcessEvent): unknown {
    const obj: any = {};
    if (message.pid !== 0) {
      obj.pid = Math.round(message.pid);
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    if (message.exitCode !== 0) {
      obj.exitCode = Math.round(message.exitCode);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProcessEvent>, I>>(base?: I): ProcessEvent {
    return ProcessEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProcessEvent>, I>>(object: I): ProcessEvent {
    const message = createBaseProcessEvent();
    message.pid = object.pid ?? 0;
    message.type = object.type ?? "";
    message.data = object.data ?? Buffer.alloc(0);
    message.error = object.error ?? "";
    message.exitCode = object.exitCode ?? 0;
    return message;
  },
};

function createBaseSendInputRequest(): SendInputRequest {
  return { pid: 0, input: Buffer.alloc(0) };
}

export const SendInputRequest: MessageFns<SendInputRequest> = {
  encode(message: SendInputRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pid !== 0) {
      writer.uint32(8).int32(message.pid);
    }
    if (message.input.length !== 0) {
      writer.uint32(18).bytes(message.input);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendInputRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendInputRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.pid = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.input = Buffer.from(reader.bytes());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SendInputRequest {
    return {
      pid: isSet(object.pid) ? globalThis.Number(object.pid) : 0,
      input: isSet(object.input) ? Buffer.from(bytesFromBase64(object.input)) : Buffer.alloc(0),
    };
  },

  toJSON(message: SendInputRequest): unknown {
    const obj: any = {};
    if (message.pid !== 0) {
      obj.pid = Math.round(message.pid);
    }
    if (message.input.length !== 0) {
      obj.input = base64FromBytes(message.input);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SendInputRequest>, I>>(base?: I): SendInputRequest {
    return SendInputRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SendInputRequest>, I>>(object: I): SendInputRequest {
    const message = createBaseSendInputRequest();
    message.pid = object.pid ?? 0;
    message.input = object.input ?? Buffer.alloc(0);
    return message;
  },
};

function createBaseSendInputResponse(): SendInputResponse {
  return { success: false, error: "" };
}

export const SendInputResponse: MessageFns<SendInputResponse> = {
  encode(message: SendInputResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.error !== "") {
      writer.uint32(18).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendInputResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendInputResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SendInputResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      error: isSet(object.error) ? globalThis.String(object.error) : "",
    };
  },

  toJSON(message: SendInputResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SendInputResponse>, I>>(base?: I): SendInputResponse {
    return SendInputResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SendInputResponse>, I>>(object: I): SendInputResponse {
    const message = createBaseSendInputResponse();
    message.success = object.success ?? false;
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseUpdateProcessRequest(): UpdateProcessRequest {
  return { pid: 0, cols: 0, rows: 0 };
}

export const UpdateProcessRequest: MessageFns<UpdateProcessRequest> = {
  encode(message: UpdateProcessRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pid !== 0) {
      writer.uint32(8).int32(message.pid);
    }
    if (message.cols !== 0) {
      writer.uint32(16).uint32(message.cols);
    }
    if (message.rows !== 0) {
      writer.uint32(24).uint32(message.rows);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateProcessRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProcessRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.pid = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.cols = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.rows = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateProcessRequest {
    return {
      pid: isSet(object.pid) ? globalThis.Number(object.pid) : 0,
      cols: isSet(object.cols) ? globalThis.Number(object.cols) : 0,
      rows: isSet(object.rows) ? globalThis.Number(object.rows) : 0,
    };
  },

  toJSON(message: UpdateProcessRequest): unknown {
    const obj: any = {};
    if (message.pid !== 0) {
      obj.pid = Math.round(message.pid);
    }
    if (message.cols !== 0) {
      obj.cols = Math.round(message.cols);
    }
    if (message.rows !== 0) {
      obj.rows = Math.round(message.rows);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateProcessRequest>, I>>(base?: I): UpdateProcessRequest {
    return UpdateProcessRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateProcessRequest>, I>>(object: I): UpdateProcessRequest {
    const message = createBaseUpdateProcessRequest();
    message.pid = object.pid ?? 0;
    message.cols = object.cols ?? 0;
    message.rows = object.rows ?? 0;
    return message;
  },
};

function createBaseUpdateProcessResponse(): UpdateProcessResponse {
  return { success: false, error: "" };
}

export const UpdateProcessResponse: MessageFns<UpdateProcessResponse> = {
  encode(message: UpdateProcessResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.error !== "") {
      writer.uint32(18).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateProcessResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProcessResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateProcessResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      error: isSet(object.error) ? globalThis.String(object.error) : "",
    };
  },

  toJSON(message: UpdateProcessResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateProcessResponse>, I>>(base?: I): UpdateProcessResponse {
    return UpdateProcessResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateProcessResponse>, I>>(object: I): UpdateProcessResponse {
    const message = createBaseUpdateProcessResponse();
    message.success = object.success ?? false;
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseSendSignalRequest(): SendSignalRequest {
  return { pid: 0, signal: "" };
}

export const SendSignalRequest: MessageFns<SendSignalRequest> = {
  encode(message: SendSignalRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pid !== 0) {
      writer.uint32(8).int32(message.pid);
    }
    if (message.signal !== "") {
      writer.uint32(18).string(message.signal);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendSignalRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendSignalRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.pid = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.signal = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SendSignalRequest {
    return {
      pid: isSet(object.pid) ? globalThis.Number(object.pid) : 0,
      signal: isSet(object.signal) ? globalThis.String(object.signal) : "",
    };
  },

  toJSON(message: SendSignalRequest): unknown {
    const obj: any = {};
    if (message.pid !== 0) {
      obj.pid = Math.round(message.pid);
    }
    if (message.signal !== "") {
      obj.signal = message.signal;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SendSignalRequest>, I>>(base?: I): SendSignalRequest {
    return SendSignalRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SendSignalRequest>, I>>(object: I): SendSignalRequest {
    const message = createBaseSendSignalRequest();
    message.pid = object.pid ?? 0;
    message.signal = object.signal ?? "";
    return message;
  },
};

function createBaseSendSignalResponse(): SendSignalResponse {
  return { success: false, error: "" };
}

export const SendSignalResponse: MessageFns<SendSignalResponse> = {
  encode(message: SendSignalResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.error !== "") {
      writer.uint32(18).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendSignalResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendSignalResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SendSignalResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      error: isSet(object.error) ? globalThis.String(object.error) : "",
    };
  },

  toJSON(message: SendSignalResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SendSignalResponse>, I>>(base?: I): SendSignalResponse {
    return SendSignalResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SendSignalResponse>, I>>(object: I): SendSignalResponse {
    const message = createBaseSendSignalResponse();
    message.success = object.success ?? false;
    message.error = object.error ?? "";
    return message;
  },
};

export type TerminalService = typeof TerminalService;
export const TerminalService = {
  listProcesses: {
    path: "/terminal.Terminal/ListProcesses",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListProcessesRequest) => Buffer.from(ListProcessesRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListProcessesRequest.decode(value),
    responseSerialize: (value: ListProcessesResponse) => Buffer.from(ListProcessesResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListProcessesResponse.decode(value),
  },
  spawnProcess: {
    path: "/terminal.Terminal/SpawnProcess",
    requestStream: false,
    responseStream: true,
    requestSerialize: (value: SpawnProcessRequest) => Buffer.from(SpawnProcessRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SpawnProcessRequest.decode(value),
    responseSerialize: (value: ProcessEvent) => Buffer.from(ProcessEvent.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ProcessEvent.decode(value),
  },
  connectToProcess: {
    path: "/terminal.Terminal/ConnectToProcess",
    requestStream: false,
    responseStream: true,
    requestSerialize: (value: ConnectToProcessRequest) => Buffer.from(ConnectToProcessRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ConnectToProcessRequest.decode(value),
    responseSerialize: (value: ProcessEvent) => Buffer.from(ProcessEvent.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ProcessEvent.decode(value),
  },
  sendInput: {
    path: "/terminal.Terminal/SendInput",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SendInputRequest) => Buffer.from(SendInputRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SendInputRequest.decode(value),
    responseSerialize: (value: SendInputResponse) => Buffer.from(SendInputResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SendInputResponse.decode(value),
  },
  updateProcess: {
    path: "/terminal.Terminal/UpdateProcess",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateProcessRequest) => Buffer.from(UpdateProcessRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateProcessRequest.decode(value),
    responseSerialize: (value: UpdateProcessResponse) => Buffer.from(UpdateProcessResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UpdateProcessResponse.decode(value),
  },
  sendSignal: {
    path: "/terminal.Terminal/SendSignal",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SendSignalRequest) => Buffer.from(SendSignalRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SendSignalRequest.decode(value),
    responseSerialize: (value: SendSignalResponse) => Buffer.from(SendSignalResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SendSignalResponse.decode(value),
  },
} as const;

export interface TerminalServer extends UntypedServiceImplementation {
  listProcesses: handleUnaryCall<ListProcessesRequest, ListProcessesResponse>;
  spawnProcess: handleServerStreamingCall<SpawnProcessRequest, ProcessEvent>;
  connectToProcess: handleServerStreamingCall<ConnectToProcessRequest, ProcessEvent>;
  sendInput: handleUnaryCall<SendInputRequest, SendInputResponse>;
  updateProcess: handleUnaryCall<UpdateProcessRequest, UpdateProcessResponse>;
  sendSignal: handleUnaryCall<SendSignalRequest, SendSignalResponse>;
}

export interface TerminalClient extends Client {
  listProcesses(
    request: ListProcessesRequest,
    callback: (error: ServiceError | null, response: ListProcessesResponse) => void,
  ): ClientUnaryCall;
  listProcesses(
    request: ListProcessesRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListProcessesResponse) => void,
  ): ClientUnaryCall;
  listProcesses(
    request: ListProcessesRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListProcessesResponse) => void,
  ): ClientUnaryCall;
  spawnProcess(request: SpawnProcessRequest, options?: Partial<CallOptions>): ClientReadableStream<ProcessEvent>;
  spawnProcess(
    request: SpawnProcessRequest,
    metadata?: Metadata,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<ProcessEvent>;
  connectToProcess(
    request: ConnectToProcessRequest,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<ProcessEvent>;
  connectToProcess(
    request: ConnectToProcessRequest,
    metadata?: Metadata,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<ProcessEvent>;
  sendInput(
    request: SendInputRequest,
    callback: (error: ServiceError | null, response: SendInputResponse) => void,
  ): ClientUnaryCall;
  sendInput(
    request: SendInputRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SendInputResponse) => void,
  ): ClientUnaryCall;
  sendInput(
    request: SendInputRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SendInputResponse) => void,
  ): ClientUnaryCall;
  updateProcess(
    request: UpdateProcessRequest,
    callback: (error: ServiceError | null, response: UpdateProcessResponse) => void,
  ): ClientUnaryCall;
  updateProcess(
    request: UpdateProcessRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UpdateProcessResponse) => void,
  ): ClientUnaryCall;
  updateProcess(
    request: UpdateProcessRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UpdateProcessResponse) => void,
  ): ClientUnaryCall;
  sendSignal(
    request: SendSignalRequest,
    callback: (error: ServiceError | null, response: SendSignalResponse) => void,
  ): ClientUnaryCall;
  sendSignal(
    request: SendSignalRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SendSignalResponse) => void,
  ): ClientUnaryCall;
  sendSignal(
    request: SendSignalRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SendSignalResponse) => void,
  ): ClientUnaryCall;
}

export const TerminalClient = makeGenericClientConstructor(TerminalService, "terminal.Terminal") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): TerminalClient;
  service: typeof TerminalService;
  serviceName: string;
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

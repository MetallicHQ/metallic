# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import filesystem_pb2 as filesystem__pb2

GRPC_GENERATED_VERSION = '1.73.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in filesystem_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class FilesystemStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ReadFile = channel.unary_unary(
                '/filesystem.Filesystem/ReadFile',
                request_serializer=filesystem__pb2.ReadFileRequest.SerializeToString,
                response_deserializer=filesystem__pb2.ReadFileResponse.FromString,
                _registered_method=True)
        self.ReadFileStream = channel.unary_stream(
                '/filesystem.Filesystem/ReadFileStream',
                request_serializer=filesystem__pb2.ReadFileStreamRequest.SerializeToString,
                response_deserializer=filesystem__pb2.FileChunk.FromString,
                _registered_method=True)
        self.WriteFile = channel.unary_unary(
                '/filesystem.Filesystem/WriteFile',
                request_serializer=filesystem__pb2.WriteFileRequest.SerializeToString,
                response_deserializer=filesystem__pb2.WriteFileResponse.FromString,
                _registered_method=True)
        self.WriteFileStream = channel.stream_unary(
                '/filesystem.Filesystem/WriteFileStream',
                request_serializer=filesystem__pb2.FileChunk.SerializeToString,
                response_deserializer=filesystem__pb2.WriteFileResponse.FromString,
                _registered_method=True)
        self.ReadDirectory = channel.unary_unary(
                '/filesystem.Filesystem/ReadDirectory',
                request_serializer=filesystem__pb2.ReadDirectoryRequest.SerializeToString,
                response_deserializer=filesystem__pb2.ReadDirectoryResponse.FromString,
                _registered_method=True)
        self.CreateDirectory = channel.unary_unary(
                '/filesystem.Filesystem/CreateDirectory',
                request_serializer=filesystem__pb2.CreateDirectoryRequest.SerializeToString,
                response_deserializer=filesystem__pb2.CreateDirectoryResponse.FromString,
                _registered_method=True)
        self.Rename = channel.unary_unary(
                '/filesystem.Filesystem/Rename',
                request_serializer=filesystem__pb2.RenameRequest.SerializeToString,
                response_deserializer=filesystem__pb2.RenameResponse.FromString,
                _registered_method=True)
        self.Unlink = channel.unary_unary(
                '/filesystem.Filesystem/Unlink',
                request_serializer=filesystem__pb2.UnlinkRequest.SerializeToString,
                response_deserializer=filesystem__pb2.UnlinkResponse.FromString,
                _registered_method=True)
        self.Exists = channel.unary_unary(
                '/filesystem.Filesystem/Exists',
                request_serializer=filesystem__pb2.ExistsRequest.SerializeToString,
                response_deserializer=filesystem__pb2.ExistsResponse.FromString,
                _registered_method=True)
        self.GetStats = channel.unary_unary(
                '/filesystem.Filesystem/GetStats',
                request_serializer=filesystem__pb2.GetStatsRequest.SerializeToString,
                response_deserializer=filesystem__pb2.GetStatsResponse.FromString,
                _registered_method=True)
        self.Watch = channel.unary_stream(
                '/filesystem.Filesystem/Watch',
                request_serializer=filesystem__pb2.WatchRequest.SerializeToString,
                response_deserializer=filesystem__pb2.WatchEvent.FromString,
                _registered_method=True)


class FilesystemServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ReadFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadFileStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WriteFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WriteFileStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadDirectory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateDirectory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Rename(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Unlink(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Exists(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Watch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FilesystemServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ReadFile': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadFile,
                    request_deserializer=filesystem__pb2.ReadFileRequest.FromString,
                    response_serializer=filesystem__pb2.ReadFileResponse.SerializeToString,
            ),
            'ReadFileStream': grpc.unary_stream_rpc_method_handler(
                    servicer.ReadFileStream,
                    request_deserializer=filesystem__pb2.ReadFileStreamRequest.FromString,
                    response_serializer=filesystem__pb2.FileChunk.SerializeToString,
            ),
            'WriteFile': grpc.unary_unary_rpc_method_handler(
                    servicer.WriteFile,
                    request_deserializer=filesystem__pb2.WriteFileRequest.FromString,
                    response_serializer=filesystem__pb2.WriteFileResponse.SerializeToString,
            ),
            'WriteFileStream': grpc.stream_unary_rpc_method_handler(
                    servicer.WriteFileStream,
                    request_deserializer=filesystem__pb2.FileChunk.FromString,
                    response_serializer=filesystem__pb2.WriteFileResponse.SerializeToString,
            ),
            'ReadDirectory': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadDirectory,
                    request_deserializer=filesystem__pb2.ReadDirectoryRequest.FromString,
                    response_serializer=filesystem__pb2.ReadDirectoryResponse.SerializeToString,
            ),
            'CreateDirectory': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateDirectory,
                    request_deserializer=filesystem__pb2.CreateDirectoryRequest.FromString,
                    response_serializer=filesystem__pb2.CreateDirectoryResponse.SerializeToString,
            ),
            'Rename': grpc.unary_unary_rpc_method_handler(
                    servicer.Rename,
                    request_deserializer=filesystem__pb2.RenameRequest.FromString,
                    response_serializer=filesystem__pb2.RenameResponse.SerializeToString,
            ),
            'Unlink': grpc.unary_unary_rpc_method_handler(
                    servicer.Unlink,
                    request_deserializer=filesystem__pb2.UnlinkRequest.FromString,
                    response_serializer=filesystem__pb2.UnlinkResponse.SerializeToString,
            ),
            'Exists': grpc.unary_unary_rpc_method_handler(
                    servicer.Exists,
                    request_deserializer=filesystem__pb2.ExistsRequest.FromString,
                    response_serializer=filesystem__pb2.ExistsResponse.SerializeToString,
            ),
            'GetStats': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStats,
                    request_deserializer=filesystem__pb2.GetStatsRequest.FromString,
                    response_serializer=filesystem__pb2.GetStatsResponse.SerializeToString,
            ),
            'Watch': grpc.unary_stream_rpc_method_handler(
                    servicer.Watch,
                    request_deserializer=filesystem__pb2.WatchRequest.FromString,
                    response_serializer=filesystem__pb2.WatchEvent.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'filesystem.Filesystem', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('filesystem.Filesystem', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Filesystem(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ReadFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/filesystem.Filesystem/ReadFile',
            filesystem__pb2.ReadFileRequest.SerializeToString,
            filesystem__pb2.ReadFileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadFileStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/filesystem.Filesystem/ReadFileStream',
            filesystem__pb2.ReadFileStreamRequest.SerializeToString,
            filesystem__pb2.FileChunk.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WriteFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/filesystem.Filesystem/WriteFile',
            filesystem__pb2.WriteFileRequest.SerializeToString,
            filesystem__pb2.WriteFileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WriteFileStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/filesystem.Filesystem/WriteFileStream',
            filesystem__pb2.FileChunk.SerializeToString,
            filesystem__pb2.WriteFileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadDirectory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/filesystem.Filesystem/ReadDirectory',
            filesystem__pb2.ReadDirectoryRequest.SerializeToString,
            filesystem__pb2.ReadDirectoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateDirectory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/filesystem.Filesystem/CreateDirectory',
            filesystem__pb2.CreateDirectoryRequest.SerializeToString,
            filesystem__pb2.CreateDirectoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Rename(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/filesystem.Filesystem/Rename',
            filesystem__pb2.RenameRequest.SerializeToString,
            filesystem__pb2.RenameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Unlink(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/filesystem.Filesystem/Unlink',
            filesystem__pb2.UnlinkRequest.SerializeToString,
            filesystem__pb2.UnlinkResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Exists(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/filesystem.Filesystem/Exists',
            filesystem__pb2.ExistsRequest.SerializeToString,
            filesystem__pb2.ExistsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/filesystem.Filesystem/GetStats',
            filesystem__pb2.GetStatsRequest.SerializeToString,
            filesystem__pb2.GetStatsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Watch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/filesystem.Filesystem/Watch',
            filesystem__pb2.WatchRequest.SerializeToString,
            filesystem__pb2.WatchEvent.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

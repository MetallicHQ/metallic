# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import terminal_pb2 as terminal__pb2

GRPC_GENERATED_VERSION = '1.73.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in terminal_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class TerminalStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListProcesses = channel.unary_unary(
                '/terminal.Terminal/ListProcesses',
                request_serializer=terminal__pb2.ListProcessesRequest.SerializeToString,
                response_deserializer=terminal__pb2.ListProcessesResponse.FromString,
                _registered_method=True)
        self.SpawnProcess = channel.unary_stream(
                '/terminal.Terminal/SpawnProcess',
                request_serializer=terminal__pb2.SpawnProcessRequest.SerializeToString,
                response_deserializer=terminal__pb2.ProcessEvent.FromString,
                _registered_method=True)
        self.ConnectToProcess = channel.unary_stream(
                '/terminal.Terminal/ConnectToProcess',
                request_serializer=terminal__pb2.ConnectToProcessRequest.SerializeToString,
                response_deserializer=terminal__pb2.ProcessEvent.FromString,
                _registered_method=True)
        self.SendInput = channel.unary_unary(
                '/terminal.Terminal/SendInput',
                request_serializer=terminal__pb2.SendInputRequest.SerializeToString,
                response_deserializer=terminal__pb2.SendInputResponse.FromString,
                _registered_method=True)
        self.UpdateProcess = channel.unary_unary(
                '/terminal.Terminal/UpdateProcess',
                request_serializer=terminal__pb2.UpdateProcessRequest.SerializeToString,
                response_deserializer=terminal__pb2.UpdateProcessResponse.FromString,
                _registered_method=True)
        self.SendSignal = channel.unary_unary(
                '/terminal.Terminal/SendSignal',
                request_serializer=terminal__pb2.SendSignalRequest.SerializeToString,
                response_deserializer=terminal__pb2.SendSignalResponse.FromString,
                _registered_method=True)


class TerminalServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ListProcesses(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpawnProcess(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConnectToProcess(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendInput(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateProcess(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendSignal(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TerminalServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListProcesses': grpc.unary_unary_rpc_method_handler(
                    servicer.ListProcesses,
                    request_deserializer=terminal__pb2.ListProcessesRequest.FromString,
                    response_serializer=terminal__pb2.ListProcessesResponse.SerializeToString,
            ),
            'SpawnProcess': grpc.unary_stream_rpc_method_handler(
                    servicer.SpawnProcess,
                    request_deserializer=terminal__pb2.SpawnProcessRequest.FromString,
                    response_serializer=terminal__pb2.ProcessEvent.SerializeToString,
            ),
            'ConnectToProcess': grpc.unary_stream_rpc_method_handler(
                    servicer.ConnectToProcess,
                    request_deserializer=terminal__pb2.ConnectToProcessRequest.FromString,
                    response_serializer=terminal__pb2.ProcessEvent.SerializeToString,
            ),
            'SendInput': grpc.unary_unary_rpc_method_handler(
                    servicer.SendInput,
                    request_deserializer=terminal__pb2.SendInputRequest.FromString,
                    response_serializer=terminal__pb2.SendInputResponse.SerializeToString,
            ),
            'UpdateProcess': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateProcess,
                    request_deserializer=terminal__pb2.UpdateProcessRequest.FromString,
                    response_serializer=terminal__pb2.UpdateProcessResponse.SerializeToString,
            ),
            'SendSignal': grpc.unary_unary_rpc_method_handler(
                    servicer.SendSignal,
                    request_deserializer=terminal__pb2.SendSignalRequest.FromString,
                    response_serializer=terminal__pb2.SendSignalResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'terminal.Terminal', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('terminal.Terminal', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Terminal(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ListProcesses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/terminal.Terminal/ListProcesses',
            terminal__pb2.ListProcessesRequest.SerializeToString,
            terminal__pb2.ListProcessesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SpawnProcess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/terminal.Terminal/SpawnProcess',
            terminal__pb2.SpawnProcessRequest.SerializeToString,
            terminal__pb2.ProcessEvent.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ConnectToProcess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/terminal.Terminal/ConnectToProcess',
            terminal__pb2.ConnectToProcessRequest.SerializeToString,
            terminal__pb2.ProcessEvent.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendInput(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/terminal.Terminal/SendInput',
            terminal__pb2.SendInputRequest.SerializeToString,
            terminal__pb2.SendInputResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateProcess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/terminal.Terminal/UpdateProcess',
            terminal__pb2.UpdateProcessRequest.SerializeToString,
            terminal__pb2.UpdateProcessResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendSignal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/terminal.Terminal/SendSignal',
            terminal__pb2.SendSignalRequest.SerializeToString,
            terminal__pb2.SendSignalResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
